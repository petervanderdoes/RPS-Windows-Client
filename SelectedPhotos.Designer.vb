'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System.CodeDom.Compiler
Imports System.ComponentModel
Imports System.ComponentModel.Design
Imports System.Runtime.Serialization
Imports System.Xml.Schema
Imports System.Xml.Serialization


'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Serializable(),  _
 DesignerCategory("code"),  _
 ToolboxItem(true),  _
 XmlSchemaProvider("GetTypedDataSetSchema"),  _
 XmlRoot("SelectedPhotos"),  _
 HelpKeyword("vs.data.DataSet")>  _
Partial Public Class SelectedPhotos
    Inherits DataSet
    
    Private tableCompetition_Entries As Competition_EntriesDataTable
    
    Private _schemaSerializationMode As SchemaSerializationMode = SchemaSerializationMode.IncludeSchema
    
    <DebuggerNonUserCode(),  _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <DebuggerNonUserCode(),  _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = SchemaSerializationMode.IncludeSchema) Then
            Dim ds As DataSet = New DataSet()
            ds.ReadXmlSchema(New XmlTextReader(New StringReader(strSchema)))
            If (Not (ds.Tables("Competition Entries")) Is Nothing) Then
                MyBase.Tables.Add(New Competition_EntriesDataTable(ds.Tables("Competition Entries")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New XmlTextReader(New StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <DebuggerNonUserCode(),  _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Browsable(false),  _
     DesignerSerializationVisibility(DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Competition_Entries() As Competition_EntriesDataTable
        Get
            Return Me.tableCompetition_Entries
        End Get
    End Property
    
    <DebuggerNonUserCode(),  _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Browsable(true),  _
     DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <DebuggerNonUserCode(),  _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <DebuggerNonUserCode(),  _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <DebuggerNonUserCode(),  _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <DebuggerNonUserCode(),  _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As DataSet
        Dim cln As SelectedPhotos = CType(MyBase.Clone,SelectedPhotos)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <DebuggerNonUserCode(),  _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <DebuggerNonUserCode(),  _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <DebuggerNonUserCode(),  _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As DataSet = New DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("Competition Entries")) Is Nothing) Then
                MyBase.Tables.Add(New Competition_EntriesDataTable(ds.Tables("Competition Entries")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <DebuggerNonUserCode(),  _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As XmlSchema
        Dim stream As MemoryStream = New MemoryStream()
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    <DebuggerNonUserCode(),  _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <DebuggerNonUserCode(),  _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableCompetition_Entries = CType(MyBase.Tables("Competition Entries"),Competition_EntriesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCompetition_Entries) Is Nothing) Then
                Me.tableCompetition_Entries.InitVars
            End If
        End If
    End Sub
    
    <DebuggerNonUserCode(),  _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "SelectedPhotos"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/SelectedPhotos.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = SchemaSerializationMode.IncludeSchema
        Me.tableCompetition_Entries = New Competition_EntriesDataTable()
        MyBase.Tables.Add(Me.tableCompetition_Entries)
    End Sub
    
    <DebuggerNonUserCode(),  _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeCompetition_Entries() As Boolean
        Return false
    End Function
    
    <DebuggerNonUserCode(),  _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As CollectionChangeEventArgs)
        If (e.Action = CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <DebuggerNonUserCode(),  _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As XmlSchemaSet) As XmlSchemaComplexType
        Dim ds As SelectedPhotos = New SelectedPhotos()
        Dim type As XmlSchemaComplexType = New XmlSchemaComplexType()
        Dim sequence As XmlSchemaSequence = New XmlSchemaSequence()
        Dim any As XmlSchemaAny = New XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As MemoryStream = New MemoryStream()
            Dim s2 As MemoryStream = New MemoryStream()
            Try 
                Dim schema As XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub Competition_EntriesRowChangeEventHandler(ByVal sender As Object, ByVal e As Competition_EntriesRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Serializable(),  _
     XmlSchemaProvider("GetTypedTableSchema")>  _
    Partial Public Class Competition_EntriesDataTable
        Inherits TypedTableBase(Of Competition_EntriesRow)
        
        Private columnAward As DataColumn
        
        Private columnClassification As DataColumn
        
        Private columnCompetition_Date_1 As DataColumn
        
        Private columnDisplay_Sequence As DataColumn
        
        Private columnImage_File_Name As DataColumn
        
        Private columnMaker As DataColumn
        
        Private columnMedium As DataColumn
        
        Private columnPhoto_ID As DataColumn
        
        Private columnScore_1 As DataColumn
        
        Private columnServer_Entry_ID As DataColumn
        
        Private columnTheme As DataColumn
        
        Private columnTitle As DataColumn
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Competition Entries"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AwardColumn() As DataColumn
            Get
                Return Me.columnAward
            End Get
        End Property
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ClassificationColumn() As DataColumn
            Get
                Return Me.columnClassification
            End Get
        End Property
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Competition_Date_1Column() As DataColumn
            Get
                Return Me.columnCompetition_Date_1
            End Get
        End Property
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Display_SequenceColumn() As DataColumn
            Get
                Return Me.columnDisplay_Sequence
            End Get
        End Property
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Image_File_NameColumn() As DataColumn
            Get
                Return Me.columnImage_File_Name
            End Get
        End Property
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MakerColumn() As DataColumn
            Get
                Return Me.columnMaker
            End Get
        End Property
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MediumColumn() As DataColumn
            Get
                Return Me.columnMedium
            End Get
        End Property
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Photo_IDColumn() As DataColumn
            Get
                Return Me.columnPhoto_ID
            End Get
        End Property
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Score_1Column() As DataColumn
            Get
                Return Me.columnScore_1
            End Get
        End Property
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Server_Entry_IDColumn() As DataColumn
            Get
                Return Me.columnServer_Entry_ID
            End Get
        End Property
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ThemeColumn() As DataColumn
            Get
                Return Me.columnTheme
            End Get
        End Property
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TitleColumn() As DataColumn
            Get
                Return Me.columnTitle
            End Get
        End Property
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Competition_EntriesRow
            Get
                Return CType(Me.Rows(index),Competition_EntriesRow)
            End Get
        End Property
        
        <GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Competition_EntriesRowChanging As Competition_EntriesRowChangeEventHandler
        
        <GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Competition_EntriesRowChanged As Competition_EntriesRowChangeEventHandler
        
        <GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Competition_EntriesRowDeleting As Competition_EntriesRowChangeEventHandler
        
        <GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Competition_EntriesRowDeleted As Competition_EntriesRowChangeEventHandler
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddCompetition_EntriesRow(ByVal row As Competition_EntriesRow)
            Me.Rows.Add(row)
        End Sub
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddCompetition_EntriesRow(ByVal Award As String, ByVal Classification As String, ByVal Competition_Date_1 As Date, ByVal Display_Sequence As Integer, ByVal Image_File_Name As String, ByVal Maker As String, ByVal Medium As String, ByVal Score_1 As Integer, ByVal Server_Entry_ID As Integer, ByVal Theme As String, ByVal Title As String) As Competition_EntriesRow
            Dim rowCompetition_EntriesRow As Competition_EntriesRow = CType(Me.NewRow,Competition_EntriesRow)
            Dim columnValuesArray() As Object = New Object() {Award, Classification, Competition_Date_1, Display_Sequence, Image_File_Name, Maker, Medium, Nothing, Score_1, Server_Entry_ID, Theme, Title}
            rowCompetition_EntriesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCompetition_EntriesRow)
            Return rowCompetition_EntriesRow
        End Function
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPhoto_ID(ByVal Photo_ID As Integer) As Competition_EntriesRow
            Return CType(Me.Rows.Find(New Object() {Photo_ID}),Competition_EntriesRow)
        End Function
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As DataTable
            Dim cln As Competition_EntriesDataTable = CType(MyBase.Clone,Competition_EntriesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As DataTable
            Return New Competition_EntriesDataTable()
        End Function
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnAward = MyBase.Columns("Award")
            Me.columnClassification = MyBase.Columns("Classification")
            Me.columnCompetition_Date_1 = MyBase.Columns("Competition Date 1")
            Me.columnDisplay_Sequence = MyBase.Columns("Display Sequence")
            Me.columnImage_File_Name = MyBase.Columns("Image File Name")
            Me.columnMaker = MyBase.Columns("Maker")
            Me.columnMedium = MyBase.Columns("Medium")
            Me.columnPhoto_ID = MyBase.Columns("Photo_ID")
            Me.columnScore_1 = MyBase.Columns("Score 1")
            Me.columnServer_Entry_ID = MyBase.Columns("Server Entry ID")
            Me.columnTheme = MyBase.Columns("Theme")
            Me.columnTitle = MyBase.Columns("Title")
        End Sub
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnAward = New DataColumn("Award", GetType(String), Nothing, MappingType.Element)
            MyBase.Columns.Add(Me.columnAward)
            Me.columnClassification = New DataColumn("Classification", GetType(String), Nothing, MappingType.Element)
            MyBase.Columns.Add(Me.columnClassification)
            Me.columnCompetition_Date_1 = New DataColumn("Competition Date 1", GetType(Date), Nothing, MappingType.Element)
            MyBase.Columns.Add(Me.columnCompetition_Date_1)
            Me.columnDisplay_Sequence = New DataColumn("Display Sequence", GetType(Integer), Nothing, MappingType.Element)
            MyBase.Columns.Add(Me.columnDisplay_Sequence)
            Me.columnImage_File_Name = New DataColumn("Image File Name", GetType(String), Nothing, MappingType.Element)
            MyBase.Columns.Add(Me.columnImage_File_Name)
            Me.columnMaker = New DataColumn("Maker", GetType(String), Nothing, MappingType.Element)
            MyBase.Columns.Add(Me.columnMaker)
            Me.columnMedium = New DataColumn("Medium", GetType(String), Nothing, MappingType.Element)
            MyBase.Columns.Add(Me.columnMedium)
            Me.columnPhoto_ID = New DataColumn("Photo_ID", GetType(Integer), Nothing, MappingType.Element)
            MyBase.Columns.Add(Me.columnPhoto_ID)
            Me.columnScore_1 = New DataColumn("Score 1", GetType(Integer), Nothing, MappingType.Element)
            MyBase.Columns.Add(Me.columnScore_1)
            Me.columnServer_Entry_ID = New DataColumn("Server Entry ID", GetType(Integer), Nothing, MappingType.Element)
            MyBase.Columns.Add(Me.columnServer_Entry_ID)
            Me.columnTheme = New DataColumn("Theme", GetType(String), Nothing, MappingType.Element)
            MyBase.Columns.Add(Me.columnTheme)
            Me.columnTitle = New DataColumn("Title", GetType(String), Nothing, MappingType.Element)
            MyBase.Columns.Add(Me.columnTitle)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnPhoto_ID}, true))
            Me.columnPhoto_ID.AutoIncrement = true
            Me.columnPhoto_ID.AllowDBNull = false
            Me.columnPhoto_ID.Unique = true
        End Sub
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewCompetition_EntriesRow() As Competition_EntriesRow
            Return CType(Me.NewRow,Competition_EntriesRow)
        End Function
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Competition_EntriesRow(builder)
        End Function
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Type
            Return GetType(Competition_EntriesRow)
        End Function
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Competition_EntriesRowChangedEvent) Is Nothing) Then
                RaiseEvent Competition_EntriesRowChanged(Me, New Competition_EntriesRowChangeEvent(CType(e.Row,Competition_EntriesRow), e.Action))
            End If
        End Sub
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Competition_EntriesRowChangingEvent) Is Nothing) Then
                RaiseEvent Competition_EntriesRowChanging(Me, New Competition_EntriesRowChangeEvent(CType(e.Row,Competition_EntriesRow), e.Action))
            End If
        End Sub
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Competition_EntriesRowDeletedEvent) Is Nothing) Then
                RaiseEvent Competition_EntriesRowDeleted(Me, New Competition_EntriesRowChangeEvent(CType(e.Row,Competition_EntriesRow), e.Action))
            End If
        End Sub
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Competition_EntriesRowDeletingEvent) Is Nothing) Then
                RaiseEvent Competition_EntriesRowDeleting(Me, New Competition_EntriesRowChangeEvent(CType(e.Row,Competition_EntriesRow), e.Action))
            End If
        End Sub
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveCompetition_EntriesRow(ByVal row As Competition_EntriesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As XmlSchemaSet) As XmlSchemaComplexType
            Dim type As XmlSchemaComplexType = New XmlSchemaComplexType()
            Dim sequence As XmlSchemaSequence = New XmlSchemaSequence()
            Dim ds As SelectedPhotos = New SelectedPhotos()
            Dim any1 As XmlSchemaAny = New XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As XmlSchemaAny = New XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As XmlSchemaAttribute = New XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As XmlSchemaAttribute = New XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Competition_EntriesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As MemoryStream = New MemoryStream()
                Dim s2 As MemoryStream = New MemoryStream()
                Try 
                    Dim schema As XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class Competition_EntriesRow
        Inherits DataRow
        
        Private tableCompetition_Entries As Competition_EntriesDataTable
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCompetition_Entries = CType(Me.Table,Competition_EntriesDataTable)
        End Sub
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Award() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompetition_Entries.AwardColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("The value for column 'Award' in table 'Competition Entries' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompetition_Entries.AwardColumn) = value
            End Set
        End Property
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Classification() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompetition_Entries.ClassificationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("The value for column 'Classification' in table 'Competition Entries' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompetition_Entries.ClassificationColumn) = value
            End Set
        End Property
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Competition_Date_1() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCompetition_Entries.Competition_Date_1Column),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("The value for column 'Competition Date 1' in table 'Competition Entries' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompetition_Entries.Competition_Date_1Column) = value
            End Set
        End Property
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Display_Sequence() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCompetition_Entries.Display_SequenceColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("The value for column 'Display Sequence' in table 'Competition Entries' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableCompetition_Entries.Display_SequenceColumn) = value
            End Set
        End Property
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Image_File_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompetition_Entries.Image_File_NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("The value for column 'Image File Name' in table 'Competition Entries' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompetition_Entries.Image_File_NameColumn) = value
            End Set
        End Property
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Maker() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompetition_Entries.MakerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("The value for column 'Maker' in table 'Competition Entries' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompetition_Entries.MakerColumn) = value
            End Set
        End Property
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Medium() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompetition_Entries.MediumColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("The value for column 'Medium' in table 'Competition Entries' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompetition_Entries.MediumColumn) = value
            End Set
        End Property
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Photo_ID() As Integer
            Get
                Return CType(Me(Me.tableCompetition_Entries.Photo_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableCompetition_Entries.Photo_IDColumn) = value
            End Set
        End Property
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Score_1() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCompetition_Entries.Score_1Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("The value for column 'Score 1' in table 'Competition Entries' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompetition_Entries.Score_1Column) = value
            End Set
        End Property
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Server_Entry_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCompetition_Entries.Server_Entry_IDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("The value for column 'Server Entry ID' in table 'Competition Entries' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompetition_Entries.Server_Entry_IDColumn) = value
            End Set
        End Property
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Theme() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompetition_Entries.ThemeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("The value for column 'Theme' in table 'Competition Entries' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompetition_Entries.ThemeColumn) = value
            End Set
        End Property
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Title() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompetition_Entries.TitleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("The value for column 'Title' in table 'Competition Entries' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompetition_Entries.TitleColumn) = value
            End Set
        End Property
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAwardNull() As Boolean
            Return Me.IsNull(Me.tableCompetition_Entries.AwardColumn)
        End Function
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAwardNull()
            Me(Me.tableCompetition_Entries.AwardColumn) = Convert.DBNull
        End Sub
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsClassificationNull() As Boolean
            Return Me.IsNull(Me.tableCompetition_Entries.ClassificationColumn)
        End Function
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetClassificationNull()
            Me(Me.tableCompetition_Entries.ClassificationColumn) = Convert.DBNull
        End Sub
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCompetition_Date_1Null() As Boolean
            Return Me.IsNull(Me.tableCompetition_Entries.Competition_Date_1Column)
        End Function
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCompetition_Date_1Null()
            Me(Me.tableCompetition_Entries.Competition_Date_1Column) = Convert.DBNull
        End Sub
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDisplay_SequenceNull() As Boolean
            Return Me.IsNull(Me.tableCompetition_Entries.Display_SequenceColumn)
        End Function
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDisplay_SequenceNull()
            Me(Me.tableCompetition_Entries.Display_SequenceColumn) = Convert.DBNull
        End Sub
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsImage_File_NameNull() As Boolean
            Return Me.IsNull(Me.tableCompetition_Entries.Image_File_NameColumn)
        End Function
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetImage_File_NameNull()
            Me(Me.tableCompetition_Entries.Image_File_NameColumn) = Convert.DBNull
        End Sub
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMakerNull() As Boolean
            Return Me.IsNull(Me.tableCompetition_Entries.MakerColumn)
        End Function
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMakerNull()
            Me(Me.tableCompetition_Entries.MakerColumn) = Convert.DBNull
        End Sub
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMediumNull() As Boolean
            Return Me.IsNull(Me.tableCompetition_Entries.MediumColumn)
        End Function
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMediumNull()
            Me(Me.tableCompetition_Entries.MediumColumn) = Convert.DBNull
        End Sub
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsScore_1Null() As Boolean
            Return Me.IsNull(Me.tableCompetition_Entries.Score_1Column)
        End Function
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetScore_1Null()
            Me(Me.tableCompetition_Entries.Score_1Column) = Convert.DBNull
        End Sub
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsServer_Entry_IDNull() As Boolean
            Return Me.IsNull(Me.tableCompetition_Entries.Server_Entry_IDColumn)
        End Function
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetServer_Entry_IDNull()
            Me(Me.tableCompetition_Entries.Server_Entry_IDColumn) = Convert.DBNull
        End Sub
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsThemeNull() As Boolean
            Return Me.IsNull(Me.tableCompetition_Entries.ThemeColumn)
        End Function
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetThemeNull()
            Me(Me.tableCompetition_Entries.ThemeColumn) = Convert.DBNull
        End Sub
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTitleNull() As Boolean
            Return Me.IsNull(Me.tableCompetition_Entries.TitleColumn)
        End Function
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTitleNull()
            Me(Me.tableCompetition_Entries.TitleColumn) = Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class Competition_EntriesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Competition_EntriesRow
        
        Private eventAction As DataRowAction
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As Competition_EntriesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As Competition_EntriesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <DebuggerNonUserCode(),  _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
